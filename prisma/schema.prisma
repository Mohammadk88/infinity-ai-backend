// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PostStatus {
  DRAFT
  SCHEDULED
  PUBLISHED
  FAILED
}

enum SocialPlatform {
  FACEBOOK
  INSTAGRAM
  TWITTER
  LINKEDIN
  TIKTOK
  YOUTUBE
  SNAPCHAT
  WHATSAPP
  PINTEREST
  REDDIT
  TELEGRAM
  BLUESKY
  THREADS
  TIKTOK_ADS
  GOOGLE
}

enum WebContentType {
  BLOG
  LANDING_PAGE
  PRODUCT_PAGE
}

enum WebStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}
enum UserType {
  SUPPER_ADMIN
  ADMIN
  MANAGER
  PERSONAL
  COMPANY_OWNER
  COMPANY_MEMBER
  CLIENT
  AI_AGENT
}

model User {
  id          String    @id @default(uuid())
  name        String
  email       String    @unique
  emailVerified DateTime?
  phone       String?   @unique
  phoneVerified DateTime?
  image       String?
  affiliateId String? @unique
  referralCode String?   // كود الإحالة
  referredBy  String?   // معرف المستخدم الذي أحاله
  referralCount Int?    // عدد المستخدمين الذين تم إحالتهم
  referralBonus Float?  // مكافأة الإحالة
  isActive    Boolean   @default(true)
  isVerified  Boolean   @default(false) // هل تم التحقق من البريد الإلكتروني أو رقم الهاتف
  isTwoFactorEnabled Boolean @default(false) // هل تم تفعيل التحقق الثنائي
  isPasswordResetRequested Boolean @default(false) // هل تم طلب إعادة تعيين كلمة المرور
  isPasswordResetVerified Boolean @default(false) // هل تم التحقق من إعادة تعيين كلمة المرور
  isEmailVerified Boolean @default(false) // هل تم التحقق من البريد الإلكتروني
  isPhoneVerified Boolean @default(false) // هل تم التحقق من رقم الهاتف
  sword    String?   // كلمة السر مشفرة
  userType  UserType @default(PERSONAL)
  password    String
  companiesOwned Company[] @relation("CompanyOwner")
  memberIn       CompanyMember[]
  createdAt      DateTime @default(now())
  createdBy      String? // معرف المستخدم الذي أنشأ هذا المستخدم
  updatedBy      String? // معرف المستخدم الذي قام بتحديث هذا المستخدم
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  deletedBy   String? // معرف المستخدم الذي حذف هذا المستخدم
  lastLogin   DateTime?
  lastLoginIp String?
  lastLoginDevice String?
  lastLoginLocation String?
  lastLoginBrowser String?
  lastLoginOs String?
  blockedAt DateTime?
  blockedBy String? // معرف المستخدم الذي حظر هذا المستخدم
  blockedReason String? // سبب الحظر
  isSuspended Boolean   @default(false) // هل تم تعليق الحساب
  isBlocked   Boolean   @default(false) // هل تم حظر الحساب
  affiliate   Affiliate? @relation("UserAffiliate", fields: [affiliateId], references: [id])


  clients     Client[] // إذا كان مدير حسابات
  tasks       Task[]   // مهام مخصصة إله
  leads       Lead[]   // مهام مخصصة إله
  notifications Notification[]
  aiConfigs AIProviderConfig[]
  fileUploads FileUpload[]
  activityLogs ActivityLog[]
  sessions     Session[]
  invoices     Invoice[]
  automationRules AutomationRule[]
  aiJobs       AIJobQueue[]
  socialAccounts SocialAccount[]
  webContents  WebContent[]
  subscriptions Subscription[]
  marketingCampaigns MarketingCampaign[]


  LeadActivity LeadActivity[]

  Project Project[]

  Task Task[] @relation("TaskAssignee")

  TaskComment TaskComment[]

  Reminder Reminder[]

  Affiliate Affiliate[] @relation("UserAffiliates")

  Referral Referral[]

  UserPoint UserPoint[]

  PointEvent PointEvent[]

  RewardRedemption RewardRedemption[]

  Commission Commission[]

  Interaction Interaction[]
}
enum CompanyType {
  COMPANY
  AGENCY
}

model Company {
  id          String   @id @default(uuid())
  name        String
  type        CompanyType
  ownerId     String
  verified    Boolean     @default(false)
  createdAt   DateTime    @default(now())
  createdBy   String? // معرف المستخدم الذي أنشأ هذا الكيان
  updatedBy   String? // معرف المستخدم الذي قام بتحديث هذا الكيان
  updatedAt   DateTime    @updatedAt
  deletedAt   DateTime?
  deletedBy   String? // معرف المستخدم الذي حذف هذا الكيان
  isActive    Boolean     @default(true)

owner       User     @relation("CompanyOwner", fields: [ownerId], references: [id])
members     CompanyMember[]
clients     Client[]
roles       Role[]

Project Project[]
  
  Interaction Interaction[]

CompanySetting CompanySetting[]
}
model CompanySetting {
  id               String   @id @default(uuid())
  companyId        String   @unique
  email            String
  phone            String
  address          String
  website          String?
  description      String?
  logoUrl          String?
  coverImage       String?
  defaultRoleId    String
  timezone         String
  language         String
  currency         String
  countryId      String
  
  createdAt        DateTime @default(now())
  createdBy        String? // معرف المستخدم الذي أنشأ هذا الكيان
  updatedAt       DateTime @updatedAt
  updatedBy       String? // معرف المستخدم الذي قام بتحديث هذا الكيان
  
  
  countryRelation Country? @relation(fields: [countryId], references: [id])
  company          Company  @relation(fields: [companyId], references: [id])
}

model CompanyMember {
  id          String   @id @default(uuid())
  userId      String
  companyId   String
  roleId      String
  isActive    Boolean  @default(true)

  createdAt   DateTime @default(now())
  createdBy   String? // معرف المستخدم الذي أنشأ هذا الكيان
  updatedBy   String? // معرف المستخدم الذي قام بتحديث هذا الكيان
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?
  deletedBy   String? // معرف المستخدم الذي حذف هذا الكيان
  isSuspended Boolean  @default(false) // هل تم تعليق الحساب

  user        User     @relation(fields: [userId], references: [id])
  company     Company  @relation(fields: [companyId], references: [id])
  role        Role     @relation(fields: [roleId], references: [id])

}

model Client {
  id         String    @id @default(uuid())
  name        String
  email       String    @unique
  phone       String?   @unique
  image       String?
  userId     String?
  agencyId  String
  industry   String?
  createdAt  DateTime  @default(now())
  createdBy  String? // معرف المستخدم الذي أنشأ هذا الكيان
  updatedBy  String? // معرف المستخدم الذي قام بتحديث هذا الكيان
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
  deletedBy  String? // معرف المستخدم الذي حذف هذا الكيان
  isActive   Boolean   @default(true)

  currentSubscriptionId String? @unique
  currentSubscription   Subscription? @relation("ActiveSubscription", fields: [currentSubscriptionId], references: [id])

  // 💳 للربط مع بوابة الدفع (Stripe أو غيرها)
  stripeCustomerId      String? 

  // 🔁 العلاقات الحالية
  user      User?     @relation(fields: [userId], references: [id])
  agency    Company   @relation(fields: [agencyId], references: [id])
  
  socialAccounts SocialAccount[]
  marketingCampaigns MarketingCampaign[]
  webContents WebContent[]
  aiJobs     AIJobQueue[]

  Notification Notification[]

  Subscription Subscription[] @relation("ClientSubscriptions")

  Interaction Interaction[]
}

model Role {
  id          String   @id @default(uuid())
  companyId   String
  name        String
  isDefault   Boolean  @default(true)

  company     Company  @relation(fields: [companyId], references: [id])
  permissions PermissionOnRole[]

  CompanyMember CompanyMember[]
}

model Permission {
  id        String   @id @default(uuid())
  name      String
  key       String   @unique
  module    String?

  PermissionOnRole PermissionOnRole[]
    @@map("Permission")
}

model PermissionOnRole {
  id           String   @id @default(uuid())
  roleId       String
  permissionId String

  role         Role       @relation(fields: [roleId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])
}
model Interaction {
  id          String      @id @default(uuid())
  clientId    String
  companyId   String
  userId      String
  type        InteractionType
  notes       String?
  status      String?    // pending, completed, cancelled
  scheduledAt DateTime?
  completedAt DateTime?
  duration    Int?       // مدة النشاط بالدقائق 
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  client      Client      @relation(fields: [clientId], references: [id])
  company     Company     @relation(fields: [companyId], references: [id])
  user        User        @relation(fields: [userId], references: [id])
}

enum InteractionType {
  CALL
  MEETING
  EMAIL
  SOCIAL_MEDIA
  OTHER
}


model Project {
  id          String   @id @default(uuid())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime
  status      String   @default("active") // active | completed | canceled
  type        String   @default("internal") // internal | external
  priority    String   @default("normal") // low | normal | high
  budget      Float?
  currency    String   @default("USD")
  clientId    String?
  companyId   String
  createdBy   String
  createdAt   DateTime @default(now())

  company     Company  @relation(fields: [companyId], references: [id])
  createdUser User     @relation(fields: [createdBy], references: [id])

  sprints     Sprint[]
  tasks       Task[]



}

model Sprint {
  id        String   @id @default(uuid())
  name      String
  goal      String?
  projectId String
  startDate DateTime
  endDate   DateTime
  status    String   @default("active") // active | completed | canceled
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  deletedBy String? // معرف المستخدم الذي حذف هذا الكيان
  createdBy String
  updatedBy String?
  isActive  Boolean  @default(true)

  project   Project  @relation(fields: [projectId], references: [id])
  tasks     Task[]
}
enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  DONE
  PENDING
  ARCHIVED
  CANCELLED
  ON_HOLD
  DEFERRED
  INACTIVE
  IN_FUTURE
  BLOCKED
}
enum ModuleType {
  SOCIAL_POST
  SCHEDULER
  CAMPAIGN
  WEB_CONTENT
  ANALYTICS
  CLIENT
  COMPANY_SETUP
  OTHER
}
model Task {
  id          String   @id @default(uuid())
  title       String
  description String?
  status      TaskStatus @default(TODO)
  priority    Int? // 1=High, 2=Med, 3=Low
  type        String? // نوع المهمة (مثلاً: "تسويق", "تطوير", "تصميم")
  tags        String? // علامات أو تصنيفات للمهمة
  startDate   DateTime?
  endDate     DateTime?
  progress    Int? // نسبة الإنجاز (0-100)
  isRecurring Boolean @default(false) // هل المهمة متكررة؟
  recurrencePattern String? // نمط التكرار (يومياً، أسبوعياً، شهرياً، سنوياً)
  Labels      String? // تسميات أو فئات للمهمة
  TaskDependency String? // معرف المهمة المعتمدة
  KanbanOrder Int? // ترتيب المهمة في كانبان

  projectId   String
  sprintId    String?
  assignedTo  String?
  createdBy   String
  assignedBy  String?
  moduleType  ModuleType?
  moduleId    String?      // optional: ارتباط بالسجل الحقيقي

  
  dueDate     DateTime?
  createdAt   DateTime @default(now())
  updatedBy   String? // معرف المستخدم الذي قام بتحديث هذا الكيان
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?
  deletedBy   String? // معرف المستخدم الذي حذف هذا الكيان

  project     Project  @relation(fields: [projectId], references: [id])
  sprint      Sprint?  @relation(fields: [sprintId], references: [id])
  assignee    User?    @relation("TaskAssignee", fields: [assignedTo], references: [id])
  // creator     User     @relation("TaskCreator", fields: [createdBy], references: [id])

  comments    TaskComment[]
  attachments FileUpload[]

  Reminder Reminder[]

  User User[]
}

model TaskComment {
  id        String   @id @default(uuid())
  taskId    String
  userId    String
  message   String
  createdAt DateTime @default(now())

  task      Task     @relation(fields: [taskId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

enum NotificationType {
  info
  success
  warning
  error
}
model Lead {
  id         String   @id @default(uuid())
  name       String
  email      String?
  phone      String?
  source     String? // website, campaign, referral...
  company    String?
  notes      String?
  stage      String   @default("New") // New → Qualified → Proposal → Closed
  status     String   @default("Open") // Open → Won → Lost
  socialAccountId String? // معرف حساب التواصل الاجتماعي

  assignedTo String?
  createdBy  String
  createdAt  DateTime @default(now())

  assignee   User?    @relation(fields: [assignedTo], references: [id])
  socialAccount   SocialAccount?    @relation(fields: [socialAccountId], references: [id])
  // creator    User     @relation(fields: [createdBy], references: [id])

  LeadActivity LeadActivity[]

  Reminder Reminder[]
}
model LeadActivity {
  id        String   @id @default(uuid())
  leadId    String
  userId    String
  type      String // call, meeting, email, note
  message   String?
  status    String? // completed, pending, cancelled
  scheduledAt DateTime?
  completedAt DateTime?
  duration   Int? // مدة النشاط بالدقائق
  notes      String?
  followUpDate DateTime?
  followUpStatus String? // pending, completed, cancelled
  followUpNotes String?
  followUpBy String? // معرف المستخدم الذي قام بمتابعة النشاط
  followUpCreatedAt DateTime? // تاريخ إنشاء متابعة النشاط
  followUpUpdatedAt DateTime? // تاريخ تحديث متابعة النشاط
  followUpCreatedBy String? // معرف المستخدم الذي أنشأ متابعة النشاط
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  deletedBy String? // معرف المستخدم الذي حذف هذا النشاط
  createdBy String
  updatedBy String?

  lead      Lead     @relation(fields: [leadId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}
model Reminder {
  id         String   @id @default(uuid())
  userId     String
  leadId     String?
  taskId     String?
  message    String
  remindAt   DateTime
  isSent     Boolean @default(false)
  isRecurring Boolean @default(false) // هل التذكير متكرر؟
  recurrencePattern String? // نمط التكرار (يومياً، أسبوعياً، شهرياً، سنوياً)
  status     String   @default("active") // active | completed | cancelled
  type       String   @default("reminder") // نوع التذكير (مثلاً: "تذكير", "تنبيه", "إشعار")
  priority   Int? // 1=High, 2=Med, 3=Low
  tags       String? // علامات أو تصنيفات للتذكير
  notes      String? // ملاحظات إضافية
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  deletedAt  DateTime?
  deletedBy  String? // معرف المستخدم الذي حذف هذا التذكير
  createdBy  String
  updatedBy  String?
  lead       Lead?    @relation(fields: [leadId], references: [id])
  task       Task?    @relation(fields: [taskId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model Notification {
  id          String   @id @default(uuid())
  userId      String
  clientId    String
  title       String
  message     String
  isRead      Boolean  @default(false)
  type        String   @default("info")
  link        String? // رابط الإجراء المرتبط بالإشعار (مثلاً: رابط المهمة أو المنشور)
  linkText    String? // نص الرابط
  linkType    String? // نوع الرابط (مثلاً: "task", "post")
  moduleType String? // نوع العنصر المرتبط بالإشعار (Post، Task...)
  moduleId String?  // ID للعنصر المرتبط بالإشعار (Post، Task...)
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id])
  client      Client   @relation(fields: [clientId], references: [id])
}
enum AffiliateType {
  REFERRAL
  PARTNER
  RESELLER
}
model Affiliate {
  id           String   @id @default(uuid())
  userId       String
  referralCode String   @unique
  tierId     String?
  status      String   @default("pending") // pending, approved, rejected
  commission   Float    @default(10) // نسبة العمولة
  totalEarnings Float   @default(0)
  totalReferrals Int    @default(0) // عدد الإحالات
  totalConvertedReferrals Int @default(0) // عدد الإحالات التي تم تحويلها
  totalPendingReferrals Int @default(0) // عدد الإحالات المعلقة
  totalRejectedReferrals Int @default(0) // عدد الإحالات المرفوضة
  totalApprovedReferrals Int @default(0) // عدد الإحالات المعتمدة
  totalPendingEarnings Float @default(0) // الأرباح المعلقة
  totalApprovedEarnings Float @default(0) // الأرباح المعتمدة
  totalRejectedEarnings Float @default(0) // الأرباح المرفوضة
  totalWithdrawnEarnings Float @default(0) // الأرباح المسحوبة
  isActive     Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  deletedAt    DateTime?
  deletedBy    String? // معرف المستخدم الذي حذف هذا الكيان
  createdBy    String
  updatedBy    String?
  isSuspended  Boolean  @default(false) // هل تم تعليق الحساب
  isBlocked    Boolean  @default(false) // هل تم حظر الحساب
  isVerified   Boolean  @default(false) // هل تم التحقق من الحساب
  type AffiliateType @default(REFERRAL)
  isReseller Boolean @default(false) // هذا للسهولة حالياً
  user         User     @relation("UserAffiliates", fields: [userId], references: [id])
  referrals    Referral[]

tier       AffiliateTier? @relation(fields: [tierId], references: [id])

  WithdrawalRequest WithdrawalRequest[]

  User User[] @relation("UserAffiliate")
}
model UserPoint {
  id        String   @id @default(uuid())
  userId    String   @unique
  points    Int      @default(0)
  totalPoints Int    @default(0) // إجمالي النقاط المكتسبة
  redeemedPoints Int @default(0) // النقاط المستردة
  pendingPoints Int @default(0) // النقاط المعلقة
  approvedPoints Int @default(0) // النقاط المعتمدة
  rejectedPoints Int @default(0) // النقاط المرفوضة


  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  status    String   // "active", "inactive", "suspended"
  createdBy String
  updatedBy String?
  
  user      User     @relation(fields: [userId], references: [id])
}
model PointEvent {
  id        String   @id @default(uuid())
  userId    String
  type      String   // "login", "post_created", "referral_approved", etc.
  description String?
  points    Int
  status    String   // "pending", "approved", "rejected"

  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
}
model Award {
  id          String   @id @default(uuid())
  name        String
  image       String?
  description String?
  pointsCost  Int
  type        String   // "gift_card", "discount", "product", etc.
  value       Float    // قيمة الجائزة (مثل قيمة بطاقة الهدايا)
  isRedeemable Boolean  @default(true) // هل يمكن استرداد الجائزة
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())

  RewardRedemption RewardRedemption[]
}
model RewardRedemption {
  id        String   @id @default(uuid())
  userId    String
  awardId   String
  status    String   @default("pending") // "pending", "approved", "rejected"
  redeemedAt DateTime @default(now())

  user      User   @relation(fields: [userId], references: [id])
  award     Award  @relation(fields: [awardId], references: [id])
}


model AffiliateTier {
  id           String   @id @default(uuid())
  name         String
  description  String?
  minReferrals Int      @default(0)
  commission   Float    @default(10)
  benefits     String?

  affiliates   Affiliate[]
}
model Referral {
  id             String   @id @default(uuid())
  affiliateId    String
  referredUserId String
  referredAt     DateTime @default(now())
  status         String   @default("pending")
  commission     Float    @default(10)
  earnings       Float    @default(0)
  isPaid         Boolean  @default(false)
  paymentDate    DateTime?
  paymentMethod  String?
  paymentStatus  String?
  paymentReference String?
  paymentAmount  Float?
  paymentCurrency String?
  isConverted    Boolean  @default(false)

  sourceId       String?  // ⬅️ جديد
  source         ReferralSource? @relation(fields: [sourceId], references: [id])

  affiliate      Affiliate @relation(fields: [affiliateId], references: [id])
  referredUser   User      @relation(fields: [referredUserId], references: [id])
}

model ReferralSource {
  id          String   @id @default(uuid())
  code        String   @unique
  name        String
  description String?
  createdAt   DateTime @default(now())

  referrals   Referral[]
}

model Commission {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  amount         Float
  currency       String   @default("USD")
  paymentMethod  String?  // مثل: "bank_transfer", "paypal", "crypto"
  paymentStatus  String?  // مثل: "pending", "completed", "failed"
  paymentDate    DateTime?
  paymentReference String?
  type           CommissionType // مثلاً: "referral", "bonus", "payout"
  source         String?  // وصف مصدر العمولة
  status         CommissionStatus // pending, approved, paid
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

enum CommissionType {
  referral
  bonus
  payout
}

enum CommissionStatus {
  pending
  approved
  paid
}

model WithdrawalRequest {
  id          String   @id @default(uuid())
  affiliateId String
  amount      Float
  method      String
  status      String   @default("pending") // approved / rejected / paid
  requestedAt DateTime @default(now())
  processedAt DateTime?

  affiliate   Affiliate @relation(fields: [affiliateId], references: [id])
}
model SocialAccount {
  id          String   @id @default(uuid())
  clientId    String?
  userId      String
  platform    SocialPlatform
  accountName String
  pageId      String
  accessToken String
  refreshToken String?
  username    String?
  status      String   @default("active")
  tokenExpiresAt DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?
  
  @@unique([userId, platform]) // 👈 أضف هذا السطر

  user        User     @relation(fields: [userId], references: [id])
  client      Client?  @relation(fields: [clientId], references: [id])
  posts       SocialPost[]
  marketingCampaigns MarketingCampaign[]
  Lead Lead[]
}

model SocialPost {
  id              String   @id @default(uuid())
  socialAccountId String
  clientId        String
  userId          String

  content         String
  mediaUrl        String?
  scheduledAt     DateTime?
  publishedAt     DateTime?
  status          PostStatus @default(DRAFT)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  isAIGenerated   Boolean  @default(false)

  socialAccount   SocialAccount @relation(fields: [socialAccountId], references: [id])
  postTags       PostTag[]
  postCategories PostCategory[]
  schedule   ContentSchedule?

  files FileUpload[]
}

model MarketingCampaign {
  id              String   @id @default(uuid())
  clientId        String
  userId          String
  name            String
  description     String?
  startDate       DateTime
  endDate         DateTime
  budget          Float
  objective       String
  socialAccountId String
  status          String   @default("active") // active | completed | canceled
  targetAudience  String?
  platform        SocialPlatform
  content         String?
  mediaUrl        String?
  performanceMetrics Json?
  isAIGenerated   Boolean  @default(false)

  user            User            @relation(fields: [userId], references: [id])
  client          Client          @relation(fields: [clientId], references: [id])
  socialAccount   SocialAccount   @relation(fields: [socialAccountId], references: [id])
  posts           CampaignPost[]
  performance     CampaignPerformance[]

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  deletedAt       DateTime?

}

model CampaignPost {
  id          String   @id @default(uuid())
  campaignId  String
  content     String
  mediaUrl    String?
  scheduledAt DateTime?
  createdAt   DateTime @default(now())

  campaign    MarketingCampaign @relation(fields: [campaignId], references: [id])
}

model CampaignPerformance {
  id           String   @id @default(uuid())
  campaignId   String
  metric       String
  value        Float
  description  String?
  impressions  Int?
  clicks       Int?
  conversions  Int?
  engagementRate Float?
  reach        Int?
  costPerClick Float?
  costPerConversion Float?
  costPerImpression Float?
  costPerEngagement Float?
  costPerReach Float?
  engagement   Int?
  cost         Float?
  recordedAt   DateTime @default(now())

  campaign     MarketingCampaign @relation(fields: [campaignId], references: [id])
}

model AIProviderConfig {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  baseUrl     String?
  provider    String   // "openai", "gemini", ...
  apiKey      String   // مشفّر أو محفوظ بأمان
  model       String?  // "gpt-4", "claude-2"
  isActive    Boolean  @default(false)
  isDeleted   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
}

model Session {
  id         String   @id @default(uuid())
  userId     String
  token      String   @unique
  device     String?
  ipAddress  String?
  createdAt  DateTime @default(now())
  expiresAt  DateTime
  user       User     @relation(fields: [userId], references: [id])
  @@index([userId])
}

model ActivityLog {
  id         String   @id @default(uuid())
  userId     String
  action     String
  context    String?
  meta       Json?
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
}

model ContentSchedule {
  id             String   @id @default(uuid())
  socialPostId   String?  @unique
  webContentId   String?  @unique
  isAIGenerated Boolean     @default(false)
  publishAt      DateTime
  repeat         Boolean  @default(false)
  frequency      String?
  status        String      @default("pending") // pending | published | failed
  createdAt      DateTime @default(now())
  socialPost     SocialPost?   @relation(fields: [socialPostId], references: [id])
  webContent     WebContent?   @relation(fields: [webContentId], references: [id])
}

model WebContent {
  id         String   @id @default(uuid())
  clientId   String
  userId         String

  title      String
  slug       String   @unique
  content    String
  mediaUrl       String?
  type       WebContentType @default(BLOG)
  status     WebStatus @default(DRAFT)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isAIGenerated Boolean  @default(false)
  publishedAt DateTime?
  deletedAt  DateTime?

  client     Client   @relation(fields: [clientId], references: [id])
  user     User   @relation(fields: [userId], references: [id])
  schedule   ContentSchedule?
  webContentTags WebContentTag[]
  webContentCategories WebContentCategory[]

  files FileUpload[]
}
enum FileType {
    IMAGE
    VIDEO
    DOCUMENT
    AUDIO
  }
enum MediaStatus {
  UPLOADED
  PROCESSING
  PROCESSED
  FAILED
}
model FileUpload {
  id             String   @id @default(uuid())
  userId         String
  name           String
  url            String
  type           FileType
  size           Int
  properties     Json?  // هون منخزن معلومات إضافية حسب نوع الملف (resolution, duration, etc.)

  aiCategory     String?
  aiDescription  String?
  aiSummary      String?
  aiKeywords     Json?
  aiGenerated    Boolean  @default(false)

  postId         String?
  webContentId   String?
  platform       SocialPlatform?
  status         MediaStatus @default(UPLOADED)

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  deletedAt      DateTime?

  user           User        @relation(fields: [userId], references: [id])
  post           SocialPost? @relation(fields: [postId], references: [id])
  webContent     WebContent? @relation(fields: [webContentId], references: [id])

  Task Task[]
}

model Category {
  id         String   @id @default(uuid())
  name       String   @unique
  description String?
  createdAt  DateTime @default(now())
  postCategories PostCategory[]
  webContentCategories WebContentCategory[]
}

model Tag {
  id         String   @id @default(uuid())
  name       String   @unique
  createdAt  DateTime @default(now())
  postTags PostTag[]
  webContentTags WebContentTag[]
}

model PostCategory {
  postId     String
  categoryId String
  post     SocialPost   @relation(fields: [postId], references: [id])
  category Category     @relation(fields: [categoryId], references: [id])
  @@id([postId, categoryId])
}

model WebContentCategory {
  webContentId String
  categoryId   String
  webContent WebContent @relation(fields: [webContentId], references: [id])
  category   Category   @relation(fields: [categoryId], references: [id])
  @@id([webContentId, categoryId])
}

model PostTag {
  postId String
  tagId  String
  post SocialPost @relation(fields: [postId], references: [id])
  tag  Tag        @relation(fields: [tagId], references: [id])
  @@id([postId, tagId])
}

model WebContentTag {
  webContentId String
  tagId        String
  webContent WebContent @relation(fields: [webContentId], references: [id])
  tag        Tag        @relation(fields: [tagId], references: [id])
  @@id([webContentId, tagId])
}

model SubscriptionPlan {
  id           String   @id @default(uuid())
  name         String
  description  String?
  priceMonthly Float
  priceYearly  Float
  features     Json     @default("{}")
  duration    Int      // بالأيام
  isActive    Boolean  @default(true)
  isRecommended Boolean  @default(false)
  isTrial     Boolean  @default(false)
  isDeleted   Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  subscriptions Subscription[]
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  PENDING
  CANCELED
}

model Subscription {
  id             String               @id @default(uuid())
  userId            String
  clientId       String
  planId         String
  status         SubscriptionStatus  @default(ACTIVE)
  startedAt      DateTime            @default(now())
  expiresAt      DateTime
  isActive          Boolean  @default(true)
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  canceledAt     DateTime?

  user          User                @relation(fields: [userId], references: [id])
  client         Client              @relation("ClientSubscriptions", fields: [clientId], references: [id])
  activeForClient Client?            @relation("ActiveSubscription")
  plan           SubscriptionPlan    @relation(fields: [planId], references: [id])
  invoices       Invoice[]
}

model AIJobQueue {
  id           String   @id @default(cuid())
  type         String
  status       String   @default("pending")
  payload      Json
  scheduledAt  DateTime?
  startedAt    DateTime?
  completedAt  DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  userId       String?
  clientId     String?

  user         User?     @relation(fields: [userId], references: [id])
  client       Client?   @relation(fields: [clientId], references: [id])
}


model AutomationRule {
  id          String   @id @default(cuid())
  userId      String
  name        String   // اسم القاعدة (مثلاً: "نشر تلقائي عند وصول تعليق")
  trigger     String   // مثال: "new_comment", "post_scheduled", "campaign_created"
  condition   Json     // شروط إضافية (مثلاً: من حساب معين، من صفحة معينة...)
  action      Json     // الإجراء الذي سيتم (نشر، توليد رد، إرسال بريد...)
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id])
}

model Invoice {
  id             String   @id @default(cuid())
  userId         String
  subscriptionId String?
  amount         Float
  currency       String   @default("USD")
  status         String   @default("unpaid") // "unpaid" | "paid" | "failed"
  issuedAt       DateTime @default(now())
  paidAt         DateTime?

  user           User     @relation(fields: [userId], references: [id])
  subscription   Subscription? @relation(fields: [subscriptionId], references: [id])
}

model Currency {
  id        String    @id @default(uuid())
  code      String    @unique // e.g. USD, EUR
  name      String
  symbol    String
  exchangeRate Float?   // سعر الصرف بالنسبة للدولار الأمريكي
  isActive  Boolean   @default(true)
  Country Country[]
}

model Country {
  id         String    @id @default(uuid())
  name       String    @unique
  code       String    @unique
  
  currencyId String
  currency   Currency  @relation(fields: [currencyId], references: [id])

  CompanySetting CompanySetting[]
}

model Setting {
  id        String   @id @default(uuid())
  key       String   @unique
  value     String
  type      String?  // e.g. 'number', 'string', 'json', etc.
  group     String?  // e.g. 'points', 'commission', etc.
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

